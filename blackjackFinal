# authors: Coleman, Mario and Zineb
# CSC 130 final group Project
# 29 NOV 2022


from listStack import ListStack
import random
import cardDisplay
from colorama import Fore, Back, Style


def main():
    endGame = 0
    hearRules = 0
    while hearRules != 1:
        rulesAnswer = input("Would you like to read the rules?: Y/N ")
        if rulesAnswer in ("Y", 'y', 'yes', 'YES', 'Yes'):
            rules = open("gameRules")
            for line in rules:
                print(line)
            hearRules += 1
        elif rulesAnswer in ("N", "n", "NO", 'no', 'No'):
            hearRules += 1
        else:
            print('Invalid response.')


    while endGame < 1:
        startingDeck = [2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A', 2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A', 2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A', 2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A', 2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        2, 3, 4, 5, 6, 7, 8, 9, 10,
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A',
                        'J', 'Q', 'K', 'A'
                        ]
        cardDeck = ListStack(startingDeck)
        userHand = []
        dealerHand = []  # the hand of the player is an empty list to be filled and get extracted from
        print('\n\t\t' + Back.WHITE + Fore.BLACK + "Welcome to Blackjack!" + Back.RESET + Fore.RESET + '\n')

        shufflesRemain = random.randint(5, 120)
        while shufflesRemain > 0:
            shuffle(cardDeck)
            shufflesRemain -= 1

        dealCards(cardDeck, userHand, dealerHand)  # Function to deal cards to both user and dealer
        print(Fore.RED + 'Dealers Cards: ' + Fore.RESET)
        dealerShowCard = dealerHand[0]  # local variable to help display card
        print(cardDisplay.Card(dealerShowCard).show2())  # prints dealers card
        print(Fore.RED + cardDisplay.Card.showBack())  # shows back of hard
        userValue = userDraw(cardDeck, userHand)  # ask the user if they want to hit or stand
        if userValue > -1:
            dealerValue = dealerDraw(cardDeck, dealerHand)
            if dealerValue > -1:
                findWinner(userValue, dealerValue)
        endGame = gameEnder()


def dealCards(cardDeck, userHand, dealerHand):
    """add doc about returns userHand, dealerHand"""
    userHand.append(cardDeck.pop())  # card gets pushed to the top of the stack and removes it from the list
    dealerHand.append(cardDeck.pop())
    userHand.append(cardDeck.pop())
    dealerHand.append(cardDeck.pop())

    return userHand, dealerHand


def gameEnder():
    """asks user to play again. validates entry. returns 1 to end game; returns 0 to NOT end game"""
    validAnswer = 0
    returnValue = 0
    while validAnswer < 1:
        answer = input("Play again?(Y or N): ")
        answer = answer.upper()
        if answer != "Y" and answer != "N":
            print("invalid answer")
        elif answer.upper == 'Y':
            validAnswer = 1  # Not used???
            returnValue = 1
        elif answer.upper() == 'N':
            print("Thank you for playing! Come again.")
            validAnswer = 1  # Not used???
            returnValue = 1
        return returnValue


# def countHand(hand):
#     """counts card value of hand. returns calculated value INT
#     arguments: listStack hand of cards (1-9, a, j, q, k)"""
#     score = 0
#     face = ['J', 'Q', 'K']
#     ace = 0  # ignore for now
#     for card in hand:
#         if card in range(11):
#             score += card
#         elif card in face:
#             score += 10
#         else:
#             score += 11
#         # if card hand is over 21 and ace present, ace revert card to 1
#     if score > 21:
#         for card in hand:
#             if card == 'A':
#                 score -= 10
#                 hand.remove('A')
#                 hand.append('a')
#     return int(score)

def countHand(hand):
    """counts card value of hand. returns calculated value INT
    arguments: listStack hand of cards (1-9, a, j, q, k)"""
    score = 0
    face = ['J', 'Q', 'K']
    ace = 0
    for card in hand:
        if card in range(11):
            score += card
        elif card in face:
            score += 10
        else:
            score += 11
            ace += 1
    while ace > 0 and score > 21:
        score -= 10
        ace -= 1
    return int(score)


def shuffle(cardDeck):
    """shuffles cards in cardDeck. Arguments: CardDeck. returns: NOTHING (function invokes shuffle on live card deck)"""
    list1 = []
    list2 = []
    list3 = []
    list4 = []
    list5 = []
    list6 = []

    try:
        while not cardDeck.isEmpty():  # distributes cards from cardDeck randomly into 6 groups
            starter = random.randint(1, 6)
            if starter == 1:
                list1.append(cardDeck.pop())
            elif starter == 2:
                list2.append(cardDeck.pop())
            elif starter == 3:
                list3.append(cardDeck.pop())
            elif starter == 4:
                list4.append(cardDeck.pop())
            elif starter == 5:
                list5.append(cardDeck.pop())
            else:
                list6.append(cardDeck.pop())
    except:
        pass

    while len(list1) > 0 or len(list2) > 0 or len(list3) > 0 or len(list4) > 0 or len(list5) > 0 or len(
            list6) > 0:
        starter = random.randint(1, 6)
        if starter == 1:
            if len(list1) != 0:
                cardDeck.push(list1.pop())
        elif starter == 2:
            if len(list2) != 0:
                cardDeck.push(list2.pop())
        elif starter == 3:
            if len(list3) != 0:
                cardDeck.push(list3.pop())
        elif starter == 4:
            if len(list4) != 0:
                cardDeck.push(list4.pop())
        elif starter == 5:
            if len(list5) != 0:
                cardDeck.push(list5.pop())
        else:
            if len(list6) != 0:
                cardDeck.push(list6.pop())


def userDraw(cardDeck, userHand):
    """ user draws cards until bust or stand.
    RETURNS: -1 for bust, hand value for stand."""
    while countHand(userHand) < 21:  # while hand value under 21
        print('\t\t' + Fore.GREEN + Back.BLACK + 'Your Cards' + Style.RESET_ALL)
        for card in userHand:
            print(cardDisplay.Card(card).show2())  # display cards in hand
        print(f'Current hand value: {countHand(userHand)}')
        decision = input("Do you want to hit or stand? (H/S): ")
        if decision.upper() == "H":  # if user wants another card
            userHand.append(cardDeck.pop())  # add card from cardDeck to userHand
            print("Player hits ")
            print("_______________________________________________")
        elif decision.upper() == "S":
            print("Player stands")
            print("_______________________________________________")
            break
        else:
            print("Bug here!")

    if countHand(userHand) > 21:  # REPLACE LATER
        print("Busted!")
        print(f"Current hand: {userHand}")
        print(f"Final hand value: {countHand(userHand)}")

        return -1
    else:
        return countHand(userHand)


def dealerDraw(cardDeck, dealerHand):
    """dealer draws cards until 17 or greater.
    returns: -1 if dealer bust, otherwise returns hand value."""
    print(f'Dealer hand: {dealerHand}')
    while countHand(dealerHand) <= 17:  # while hand value under 21
        print('Dealer draws a card...')
        dealerHand.append(cardDeck.pop())
        print(f'Dealer hand: {dealerHand}')
        print(f'Current hand value: {countHand(dealerHand)}')

    if countHand(dealerHand) > 21:
        print(f"Dealer busted! You win!")
        return -1
    elif countHand(dealerHand) == 21:
        print("BLACKJACK! Dealer wins! Better luck next time chump..")  # might change this line
        return countHand(dealerHand)
    else:
        return countHand(dealerHand)


def findWinner(userValue, dealerValue):
    print("Final score values:")
    if userValue > dealerValue:
        print(F'Player: {userValue}, Dealer: {dealerValue}')
        print("USER WINS!")
    elif userValue < dealerValue:
        print(F'Player: {userValue}, Dealer: {dealerValue}')
        print(Fore.RED + "DEALER WINS!")
        print(Fore.RESET)
    elif userValue == dealerValue:
        print(F'Player: {userValue}, dealer: {dealerValue}')
        print("PUSH! it's a tie! Sucks to suck.")


if __name__ == __name__:
    main()
